<?php
error_reporting(E_ALL & ~E_NOTICE & ~E_DEPRECATED);
require_once dirname(__FILE__) . '/../../../../../lw_ddd/Validator.php';
require_once dirname(__FILE__) . '/../../../../../lw_ddd/Entity.php';
require_once dirname(__FILE__) . '/../../../../Domain/GB/Object/gb.php';
require_once dirname(__FILE__) . '/../../../../Domain/GB/Specification/isValid.php';

/**
 * Test class for CommandHandler.
 * Generated by PHPUnit on 2013-01-22 at 14:23:07.
 */
class isValidTest_gb extends \PHPUnit_Framework_TestCase {

    /**
     * @var CommandHandler
     */
    protected $object;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp() 
    {
        $this->isValid = new \lwMembersearch\Domain\GB\Specification\isValid();        
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown() 
    {
    }
    
    public function testisSatisfiedBy()
    {
        $mock = $this->getMockObject();
        $mock->expects($this->at(0))
             ->method("getValueByKey")
             ->will($this->returnValue("Meyer"));
        $mock->expects($this->at(1))
             ->method("getValueByKey")
             ->will($this->returnValue("Meyer"));
        $mock->expects($this->at(2))
             ->method("getValueByKey")
             ->will($this->returnValue("LW"));
        $mock->expects($this->at(3))
             ->method("getValueByKey")
             ->will($this->returnValue("LW"));
        
         $this->assertTrue($this->isValid->isSatisfiedBy($mock));
         
         
        $mock->expects($this->at(0))
             ->method("getValueByKey")
             ->will($this->returnValue(""));
        $mock->expects($this->at(1))
             ->method("getValueByKey")
             ->will($this->returnValue(""));
        $mock->expects($this->at(2))
             ->method("getValueByKey")
             ->will($this->returnValue(""));
        $mock->expects($this->at(3))
             ->method("getValueByKey")
             ->will($this->returnValue(""));
        
         $this->assertFalse($this->isValid->isSatisfiedBy($mock));
         $this->assertEquals(array(
                                "name"      => array( 1 => array( "error" => 1, "options" => "")),
                                "opt1text"  => array( 1 => array( "error" => 1, "options" => "")) ),  $this->isValid->getErrors());
    }
    
    public function testNameValidate()
    {
        $this->hasMaxlenghtAndIsRequired("name", 255, "Meyer");
    }
    
    public function testOpt1textValidate()
    {
        $this->hasMaxlenghtAndIsRequired("opt1text", 10, "LW");
    }
    
    public function hasMaxlenghtAndIsRequired($key, $maxlength, $correctReturnValue)
    {
        $method = $key."Validate";
        $mock = $this->getMockObject();
        $mock->expects($this->at(0))
             ->method("getValueByKey")
             ->will($this->returnValue($correctReturnValue));
        $mock->expects($this->at(1))
             ->method("getValueByKey")
             ->will($this->returnValue($correctReturnValue));

        $this->assertTrue($this->isValid->$method($key,$mock));
        $this->assertEmpty($this->isValid->getErrors());
        
        for($i = 0; $i <= intval($maxlength) + 1; $i++){
            $text.= "A";
        }
        
        $mock->expects($this->at(0))
             ->method("getValueByKey")
             ->will($this->returnValue($text));
        $mock->expects($this->at(1))
             ->method("getValueByKey")
             ->will($this->returnValue($text));

        $this->assertFalse($this->isValid->$method($key,$mock));
        $this->assertEquals(array(2 => array("error" => 1, "options" => array("maxlength" => intval($maxlength)))), $this->isValid->getErrorsByKey($key));
        
        $this->isValid->resetErrors();
        
        $mock->expects($this->at(0))
             ->method("getValueByKey")
             ->will($this->returnValue(""));
        $mock->expects($this->at(1))
             ->method("getValueByKey")
             ->will($this->returnValue(""));

        $this->assertFalse($this->isValid->$method($key,$mock));
        $this->assertEquals(array(1 => array("error" => 1, "options" => "")), $this->isValid->getErrorsByKey($key));
    }
    
    public function getMockObject()
    {
         /* $this->getMock(
         *      Name der zu mockenden Klasse,
         *      array( Functionsnamen ),            [ leeres Array => alle Functionen werden gemockt]
         *      array( uebergebene Konstuktor Argumente ),
         *      "",                                 [ Klassenname des Mockobjektes ]
         *      bool                                [ Den Konstruktor der Original Klasse aufrufen ]
         *  );
         */
        return $this->getMock("\\lwMembersearch\\Domain\\GB\\Object\\gb", array(), array(), "", false);
    }
}