<?php
error_reporting(E_ALL & ~E_NOTICE & ~E_DEPRECATED);
require_once dirname(__FILE__) . '/../../../../../lw_ddd/Validator.php';
require_once dirname(__FILE__) . '/../../../../../lw_ddd/Entity.php';
require_once dirname(__FILE__) . '/../../../../Domain/Member/Object/member.php';
require_once dirname(__FILE__) . '/../../../../Domain/Member/Specification/isValid.php';

/**
 * Test class for CommandHandler.
 * Generated by PHPUnit on 2013-01-22 at 14:23:07.
 */
class isValidTest_member extends \PHPUnit_Framework_TestCase {

    /**
     * @var CommandHandler
     */
    protected $object;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp() 
    {
        $this->isValid = new \lwMembersearch\Domain\Member\Specification\isValid();        
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown() 
    {
    }
    
    public function testisSatisfiedBy()
    {
        $array = array(
            "firstname" => "Max",
            "lastname"  => "Mustermann",
            "email"     => "m.mustermann@logic-works.de"
        );
        
        $array2 = array(
            "building"  => "Ranzel01",
            "room"      => "02",
            "location"  => "Deutschland",
            "phone"     => "0215216416",
            "fax"       => "35135103438-4164"
        );
        
        $mock = $this->getMockObject();
        $i = 0;
        foreach($array as $key => $value){
            $mock->expects($this->at($i++))
                 ->method("getValueByKey")
                 ->will($this->returnValue($value));
            $mock->expects($this->at($i++))
                 ->method("getValueByKey")
                 ->will($this->returnValue($value));
        }
        
        foreach($array2 as $key2 => $value2){
            $mock->expects($this->at($i++))
                 ->method("getValueByKey")
                 ->will($this->returnValue($value2));
        }
        
        $this->assertTrue($this->isValid->isSatisfiedBy($mock));
         
        
        $array = array(
            "firstname" => "",
            "lastname"  => "",
            "email"     => ""
        );
        
        $array2 = array(
            "building"  => "",
            "room"      => "",
            "location"  => "",
            "phone"     => "",
            "fax"       => ""
        );
        
        $i = 0;
        foreach($array as $key => $value){
            $mock->expects($this->at($i++))
                 ->method("getValueByKey")
                 ->will($this->returnValue($value));
            $mock->expects($this->at($i++))
                 ->method("getValueByKey")
                 ->will($this->returnValue($value));
        }
        
        foreach($array2 as $key2 => $value2){
            $mock->expects($this->at($i++))
                 ->method("getValueByKey")
                 ->will($this->returnValue($value2));
        } 
        
        
        $this->assertFalse($this->isValid->isSatisfiedBy($mock));
        $this->assertEquals(array(
                               "firstname" => array( 1 => array( "error" => 1, "options" => "")),
                               "lastname"  => array( 1 => array( "error" => 1, "options" => "")), 
                               "email"     => array( 1 => array( "error" => 1, "options" => ""), 5 => array( "error" => 1, "options" => ""))),  $this->isValid->getErrors());
    }
    
    public function testfirstameValidate()
    {
        $this->hasMaxlenghtAndIsRequired("firstname", 255, "Max");
    }
    
    public function testlastnameValidate()
    {
        $this->hasMaxlenghtAndIsRequired("lastname", 255, "Mustermann");
    }
    
    public function testemailValidate()
    {
        $mock = $this->getMockObject();
        $mock->expects($this->at(0))
             ->method("getValueByKey")
             ->will($this->returnValue("m.mustermann@logic-works.de"));
        $mock->expects($this->at(1))
             ->method("getValueByKey")
             ->will($this->returnValue("m.mustermann@logic-works.de"));

        $this->assertTrue($this->isValid->emailValidate("email",$mock));
        
        $mock->expects($this->at(0))
             ->method("getValueByKey")
             ->will($this->returnValue(""));
        $mock->expects($this->at(1))
             ->method("getValueByKey")
             ->will($this->returnValue(""));

        $this->assertFalse($this->isValid->emailValidate("email",$mock));
        $this->assertEquals(array(
                                    1 => array("error" => 1, "options" => ""),
                                    5 => array("error" => 1, "options" => "")
                                    ), $this->isValid->getErrorsByKey("email"));
    }
    
    public function testbuildingValidate()
    {
        $this->hasMaxlenght("building", 255, "Ranzel01");
    }
    
    public function testroomValidate()
    {
        $this->hasMaxlenght("room", 255, "02");
    }
    
    public function testphoneValidate()
    {
        $this->hasMaxlenght("phone", 255, "022160468");
    }
    
    public function testfaxValidate()
    {
        $this->hasMaxlenght("fax", 255, "022160468-15186");
    }
    
    public function testlocationValidate()
    {
        $this->hasMaxlenght("location", 20, "Deutschland");
    }
    
    
    public function hasMaxlenghtAndIsRequired($key, $maxlength, $correctReturnValue)
    {
        $method = $key."Validate";
        $mock = $this->getMockObject();
        $mock->expects($this->at(0))
             ->method("getValueByKey")
             ->will($this->returnValue($correctReturnValue));
        $mock->expects($this->at(1))
             ->method("getValueByKey")
             ->will($this->returnValue($correctReturnValue));

        $this->assertTrue($this->isValid->$method($key,$mock));
        $this->assertEmpty($this->isValid->getErrors());
        
        for($i = 0; $i <= intval($maxlength) + 1; $i++){
            $text.= "A";
        }
        
        $mock->expects($this->at(0))
             ->method("getValueByKey")
             ->will($this->returnValue($text));
        $mock->expects($this->at(1))
             ->method("getValueByKey")
             ->will($this->returnValue($text));

        $this->assertFalse($this->isValid->$method($key,$mock));
        $this->assertEquals(array(2 => array("error" => 1, "options" => array("maxlength" => intval($maxlength)))), $this->isValid->getErrorsByKey($key));
        
        $this->isValid->resetErrors();
        
        $mock->expects($this->at(0))
             ->method("getValueByKey")
             ->will($this->returnValue(""));
        $mock->expects($this->at(1))
             ->method("getValueByKey")
             ->will($this->returnValue(""));

        $this->assertFalse($this->isValid->$method($key,$mock));
        $this->assertEquals(array(1 => array("error" => 1, "options" => "")), $this->isValid->getErrorsByKey($key));
    }
    
    public function hasMaxlenght($key, $maxlength, $correctReturnValue)
    {
        $method = $key."Validate";
        $mock = $this->getMockObject();
        $mock->expects($this->at(0))
             ->method("getValueByKey")
             ->will($this->returnValue($correctReturnValue));

        $this->assertTrue($this->isValid->$method($key,$mock));
        $this->assertEmpty($this->isValid->getErrors());
        
        for($i = 0; $i <= intval($maxlength) + 1; $i++){
            $text.= "A";
        }
        
        $mock->expects($this->at(0))
             ->method("getValueByKey")
             ->will($this->returnValue($text));
        
        $this->assertFalse($this->isValid->$method($key,$mock));
        $this->assertEquals(array(2 => array("error" => 1, "options" => array("maxlength" => intval($maxlength)))), $this->isValid->getErrorsByKey($key));
    }
    
    public function getMockObject()
    {
         /* $this->getMock(
         *      Name der zu mockenden Klasse,
         *      array( Functionsnamen ),            [ leeres Array => alle Functionen werden gemockt]
         *      array( uebergebene Konstuktor Argumente ),
         *      "",                                 [ Klassenname des Mockobjektes ]
         *      bool                                [ Den Konstruktor der Original Klasse aufrufen ]
         *  );
         */
        return $this->getMock("\\lwMembersearch\\Domain\\Member\\Object\\member", array(), array(), "", false);
    }
}